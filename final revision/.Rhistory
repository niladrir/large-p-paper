x<-rnorm(20)
y<-x + rnorm(20)
X<-data.frame(x=x, y=y)
s<-sample(length(x))
Y<-data.frame(x=x[s],y=y)
plot(X[,1],X[,2],pch=16,col="black")
points(Y[,1],Y[,2],col="red")
x<-rnorm(5)
y<-x + rnorm(5)
X<-data.frame(x=x, y=y)
s<-sample(length(x))
Y<-data.frame(x=x[s],y=y)
plot(X[,1],X[,2],pch=16,col="black")
points(Y[,1],Y[,2],pch=12,col="red")
?pch
x<-rnorm(5)
y<-x + rnorm(5)
X<-data.frame(x=x, y=y)
s<-sample(length(x))
Y<-data.frame(x=x[s],y=y)
plot(X[,1],X[,2],pch=16,col="black")
points(Y[,1],Y[,2],pch=4,col="red")
x<-rnorm(50)
y<-x + rnorm(50)
X<-data.frame(x=x, y=y)
s<-sample(length(x))
Y<-data.frame(x=x[s],y=y)
plot(X[,1],X[,2],pch=16,col="black")
points(Y[,1],Y[,2],pch=4,col="red")
x<-runif(10000)
hist(x)
library(ggplot2)
?ggsave
sample(20)
sample(20, 1)
sample(20, 1)
ceiling(10.4)
ceiling(0.4)
floor(0.4)
library(nullabor)
library(tourr)
library(ggplot2)
library(fpc)
numnoise<-98
x<-matrix(rnorm(30*(numnoise+2)),ncol=(numnoise+2))
#x[1:10,(numnoise+1)]<-x[1:10,(numnoise+1)]+3
#x[11:20,(numnoise+1)]<-x[11:20,(numnoise+1)]-3
#x[21:30,(numnoise+2)]<-x[21:30,(numnoise+2)]+sqrt(27)
colnames(x)<-paste("X",1:(numnoise+2),sep="")
x<-scale(x)
x<-data.frame(x, cl=factor(c(rep(1,10),rep(2,10),rep(3,10))))
plot(x[,(numnoise+1)], x[,(numnoise+2)], pch=16)
optima <- save_history(x[,-(numnoise+3)], tour_path=guided_tour(index_f=pda_pp(cl=x[,(numnoise+3)], lambda=0.1), max.tries=500), max_bases=1000, rescale=F)
?cluster.stats
nbases<-dim(optima)[3]
#animate_xy(x[,-51], planned_tour(optima), axes="off", col=x[,51])
optima.global<-unclass(optima)[,,nbases]
#plot(as.matrix(x[,-(numnoise+3)])%*%optima.global, col=x[,(numnoise+3)],pch=16)
projdata.true<-data.frame(as.matrix(x[,-(numnoise+3)])%*%optima.global, cl=x[,(numnoise+3)], nbases=rep(nbases,30))
stats<-cluster.stats(dist(cbind(projdata.true$X1,projdata.true$X2)),as.numeric(projdata.true$cl),G2=T)
stats
head(projdata.true)
?stat.bwss
install.packages("sma")
library(sma)
?anova
head(projdata.true)
dd<-ddply(projdata.true,.(cl),summarise,m1=mean(X1),m2=mean(X2))
dd
dd<-ddply(projdata.true,.(cl),summarise,m1=(X1 - mean(X1))^2,m2=(x2 - mean(X2))^2)
dd<-ddply(projdata.true,.(cl),summarise,m1=(X1 - mean(X1))^2,m2=(X2 - mean(X2))^2)
head(dd)
ss<-ddply(dd,.(cl),summarise,s1=sum(m1),s2=sum(m2))
ss
sum(ss)
sum(as.vector(ss))
as.vector(ss)
sum(ss$s1) + sum(ss$s2)
as.matrix(ss)
as.matrix(ss[,2:3])
?trace
dd1<-ddply(projdata.true,.(cl),summarise,m1= mean(X1),m2= mean(X2))
dd1
ss1<-rep(dd1$m1,each=10)
head(ss1)
ss2<-rep(dd1$m2,each=10)
ss<-matrix(c(ss1,ss2),ncol=2)
ss
projdata.true[,1:2]
(projdata.true[,1:2] - ss)
(projdata.true[,1:2] - ss)*(projdata.true[,1:2] - ss)
(projdata.true[,1:2] - ss)*t((projdata.true[,1:2] - ss))
(projdata.true[,1:2] - ss)%*%t((projdata.true[,1:2] - ss))
pp<-(projdata.true[,1:2] - ss)
is.matrix(pp)
pp<-as.matrix(projdata.true[,1:2] - ss)
is.matrix(pp)
P<-pp%*%t(pp)
dim(P)
head(P)
colnames(x)<-paste("X",1:30,sep="")
colnames(P)<-paste("X",1:30,sep="")
head(P,1)
ppp<-as.data.frame(P,cl=c(rep(1:3,each=10)))
head(ppp)
rep(1:3,each=10)
ppp<-as.data.frame(P,cl=rep(1:3,each=10))
ppp
P<-as.data.frame(P)
ppp<-data.frame(P,cl=rep(1:3,each=10))
head(ppp)
stats<-cluster.stats(dist(cbind(projdata.true$X1,projdata.true$X2)),as.numeric(projdata.true$cl))
stats
l<-seq(0.1,0.99,by=0.1)
l
l<-seq(0.09,0.99,by=0.1)
l
l<-seq(0.09,0.99,by=0.1)
s<-NULL
for(i in l){
optima <- save_history(x[,-(numnoise+3)], tour_path=guided_tour(index_f=pda_pp(cl=x[,(numnoise+3)], lambda=l), max.tries=100), max_bases=1000, rescale=F)
nbases<-dim(optima)[3]
optima.global<-unclass(optima)[,,nbases]
projdata.true<-data.frame(as.matrix(x[,-(numnoise+3)])%*%optima.global, cl=x[,(numnoise+3)], nbases=rep(nbases,30))
stats<-cluster.stats(dist(cbind(projdata.true$X1,projdata.true$X2)),as.numeric(projdata.true$cl))
s[i]<-(stats$within.cluster.ss)/(30*100)
}
l<-seq(0.09,0.99,by=0.1)
s<-NULL
for(i in l){
optima <- save_history(x[,-(numnoise+3)], tour_path=guided_tour(index_f=pda_pp(cl=x[,(numnoise+3)], lambda=i), max.tries=100), max_bases=1000, rescale=F)
nbases<-dim(optima)[3]
optima.global<-unclass(optima)[,,nbases]
projdata.true<-data.frame(as.matrix(x[,-(numnoise+3)])%*%optima.global, cl=x[,(numnoise+3)], nbases=rep(nbases,30))
stats<-cluster.stats(dist(cbind(projdata.true$X1,projdata.true$X2)),as.numeric(projdata.true$cl))
s[i]<-(stats$within.cluster.ss)/(30*100)
}
plot(l,s)
s
l
s
s<-NULL
for(i in 0.09){
optima <- save_history(x[,-(numnoise+3)], tour_path=guided_tour(index_f=pda_pp(cl=x[,(numnoise+3)], lambda=i), max.tries=100), max_bases=1000, rescale=F)
nbases<-dim(optima)[3]
optima.global<-unclass(optima)[,,nbases]
projdata.true<-data.frame(as.matrix(x[,-(numnoise+3)])%*%optima.global, cl=x[,(numnoise+3)], nbases=rep(nbases,30))
stats<-cluster.stats(dist(cbind(projdata.true$X1,projdata.true$X2)),as.numeric(projdata.true$cl))
s[i]<-(stats$within.cluster.ss)/(30*100)
}
s
l<-seq(0.09,0.99,by=0.1)
s<-NULL
for(i in 1:length(l)){
optima <- save_history(x[,-(numnoise+3)], tour_path=guided_tour(index_f=pda_pp(cl=x[,(numnoise+3)], lambda=l[i]), max.tries=100), max_bases=1000, rescale=F)
nbases<-dim(optima)[3]
optima.global<-unclass(optima)[,,nbases]
projdata.true<-data.frame(as.matrix(x[,-(numnoise+3)])%*%optima.global, cl=x[,(numnoise+3)], nbases=rep(nbases,30))
stats<-cluster.stats(dist(cbind(projdata.true$X1,projdata.true$X2)),as.numeric(projdata.true$cl))
s[i]<-(stats$within.cluster.ss)/(30*100)
}
plot(l,s)
plot(l,s*3000)
plot(l,s*3000,pch=16)
abline(h=1)
plot(l,s*3000,pch=16,xlim=c(0,10))
plot(l,s*3000,pch=16,ylim=c(0,10))
numnoise<-38
x<-matrix(rnorm(30*(numnoise+2)),ncol=(numnoise+2))
#x[1:10,(numnoise+1)]<-x[1:10,(numnoise+1)]+3
#x[11:20,(numnoise+1)]<-x[11:20,(numnoise+1)]-3
#x[21:30,(numnoise+2)]<-x[21:30,(numnoise+2)]+sqrt(27)
colnames(x)<-paste("X",1:(numnoise+2),sep="")
x<-scale(x)
x<-data.frame(x, cl=factor(c(rep(1,10),rep(2,10),rep(3,10))))
l<-seq(0.0,0.9,by=0.1)
s<-NULL
for(i in 1:length(l)){
optima <- save_history(x[,-(numnoise+3)], tour_path=guided_tour(index_f=pda_pp(cl=x[,(numnoise+3)], lambda=l[i]), max.tries=100), max_bases=1000, rescale=F)
nbases<-dim(optima)[3]
optima.global<-unclass(optima)[,,nbases]
projdata.true<-data.frame(as.matrix(x[,-(numnoise+3)])%*%optima.global, cl=x[,(numnoise+3)], nbases=rep(nbases,30))
stats<-cluster.stats(dist(cbind(projdata.true$X1,projdata.true$X2)),as.numeric(projdata.true$cl))
s[i]<-(stats$within.cluster.ss)/(30*40)
}
plot(l,s,pch=16)
library(Rlab)
temp<-data.frame(city=climate$city,jan=climate$jan,jul=climate$jul)
library(ggplot2)
plot(climate$jul,climate$jan,main="Relation between January and July temperatures",xlab="july temp",ylab="jan temp")
?geom_text
qplot(jul, jan, data = climate, label = city) + geom_text()
qplot(jul, jan, data = temp, label = city) + geom_text()
qplot(jul, jan, data = temp, label = city) + geom_text(colour = "red")
qplot(jul, jan, data = temp, label = city) + geom_text(colour = "red", size = I(2))
qplot(jul, jan, data = temp, label = city) + geom_text(colour = "red", size = I(4))
qplot(jul, jan, data = temp, label = city) + geom_text(colour = "red", size = I(4)) + geom_line(slope = 1)
qplot(jul, jan, data = temp, label = city) + geom_text(colour = "red", size = I(4)) + geom_abline(slope = 1)
qplot(jul, jan, data = temp, label = city) + geom_text(colour = "red", size = I(4)) + geom_abline(slope = 1) + xlim(c(0,110)) + ylim(c(0, 110))
qplot(jul, jan, data = temp, label = city) + geom_text(colour = "red", size = I(4))
33+36+27
96/4
library(knitr)
rnorm(5)
## [1] -0.8127 -0.5275 0.7750 1.6057 -0.4202
df = data.frame(y = rnorm(100), x = 1:100)
summary(lm(y
Ëœ
x, data = df))
##
## Call:
## lm(formula = y ~ x, data = df)
##
## Residuals:
## Min 1Q Median 3Q Max
## -2.4512 -0.6739 -0.0544 0.5897 2.2780
##
## Coefficients:
## Estimate Std. Error t value Pr(>|t|)
## (Intercept) 0.167997 0.203933 0.82 0.41
## x 0.000503 0.003506 0.14 0.89
##
## Residual standard error: 1.01 on 98 degrees of freedom
## Multiple R-squared: 0.00021,Adjusted R-squared: -0.00999
## F-statistic: 0.0206 on 1 and 98 DF, p-value: 0.886
##
install.packages(c("MASS", "MCMCpack", "Matrix", "RGtk2", "RcppArmadillo", "boot", "cluster", "coda", "digest", "flexmix", "forecast", "foreign", "gWidgetsRGtk2", "ggplot2", "lattice", "locfit", "maps", "mgcv", "multcomp", "nlme", "nullabor", "permute", "rgl", "rpart", "survival", "tourr", "vegan", "xlsxjars"))
library(nullabor)
library(nullabor)
install.packages("nullabor")
library(nullabor)
?lineup
if (require("ggplot2") && require("reshape2")) {
x <- lm(tip ~ total_bill, data = tips)
tips.reg <- data.frame(tips, .resid = residuals(x), .fitted = fitted(x))
qplot(total_bill, .resid, data = tips.reg) %+%
lineup(null_lm(tip ~ total_bill, method = "rotate"), tips.reg) +
facet_wrap(~ .sample)
}
decrypt("Kw8f kyAy 9u tWa9A9Wu U")
?eval
null_lm(tip ~ total_bill, method = "rotate")
lineup(null_lm(tip ~ total_bill, method = "rotate"), tips.reg)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(tourr)
library(ggplot2)
numnoise <- 98
x<-matrix(rnorm(30*(numnoise+2)),ncol=(numnoise+2))
#x[1:10,(numnoise+1)]<-x[1:10,(numnoise+1)]+3
#x[11:20,(numnoise+1)]<-x[11:20,(numnoise+1)]-3
#x[21:30,(numnoise+2)]<-x[21:30,(numnoise+2)]+sqrt(27)
colnames(x)<-paste("X",1:(numnoise+2),sep="")
x<-scale(x)
x<-data.frame(x, cl=factor(c(rep(1,15),rep(2,15))))
noise.lda<-lda(x[,1:100],x[,101])
library(vegan)
noise.lda<-lda(x[,1:100],x[,101])
library(fpc)
noise.lda<-lda(x[,1:100],x[,101])
?lda.default
lda(cl ~ ., data = x)
lda(x)
lda(x[,1:100], x[101])
lda(x[,1:100], x[,101])
numnoise <- 98
x<-matrix(rnorm(30*(numnoise+2)),ncol=(numnoise+2))
x[1:15,(numnoise+1)]<-x[1:15,(numnoise+1)]+3
x[16:30,(numnoise+1)]<-x[16:20,(numnoise+1)]-3
#x[21:30,(numnoise+2)]<-x[21:30,(numnoise+2)]+sqrt(27)
colnames(x)<-paste("X",1:(numnoise+2),sep="")
x<-scale(x)
x<-data.frame(x, cl=factor(c(rep(1,15),rep(2,15))))
noise.lda<-lda(x[,1:100],x[,101])
numnoise <- 98
x<-matrix(rnorm(30*(numnoise+2)),ncol=(numnoise+2))
x[1:15,(numnoise+1)]<-x[1:15,(numnoise+1)]+3
x[16:30,(numnoise+1)]<-x[16:20,(numnoise+1)]-3
#x[21:30,(numnoise+2)]<-x[21:30,(numnoise+2)]+sqrt(27)
colnames(x)<-paste("X",1:(numnoise+2),sep="")
#x<-scale(x)
x<-data.frame(x, cl=factor(c(rep(1,15),rep(2,15))))
noise.lda<-lda(x[,1:100],x[,101])
numnoise <- 98
x<-matrix(rnorm(30*(numnoise+2)),ncol=(numnoise+2))
x[1:10,(numnoise+1)]<-x[1:10,(numnoise+1)]+3
x[11:20,(numnoise+1)]<-x[11:20,(numnoise+1)]-3
x[21:30,(numnoise+2)]<-x[21:30,(numnoise+2)]+sqrt(27)
colnames(x)<-paste("X",1:(numnoise+2),sep="")
x<-scale(x)
x<-data.frame(x, cl=factor(c(rep(1,10),rep(2,10), rep(3, 10))))
noise.lda<-lda(x[,1:100],x[,101])
muah <- function(dat, bwid){
t1 <- dat$time - bwid
t2 <- dat$time + bwid
dif <- diff(c(0,cdf_F))
df_f <- NULL
for(k in 1:dim(dat)[1]){
i <- which(dat$time >= t1[k] & dat$time <= t2[k])
df_f[k] <- sum(dif[i])
}
return(df_f)
}
time <- c(0.0, 1.6, 3.2, 4.8, 6.4, 8.0, 9.6, 11.2, 12.8, 14.4, 16.0)
del <- c(0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1)
cdf_F <- c(0.00, 0.00, 0.0844, 0.0844, 0.0844, 0.0844, 0.0844, 0.2590, 0.3549, 0.3549, 0.7448)
dat <- data.frame(time, del, cdf_F)
muah(dat, 2)
5000000000/10000
